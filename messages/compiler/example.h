/***************************************
 Autogenerated by cmfc. Do not modify.
***************************************/

#include <cstdint>
#include <map>
#include <string>
#include <utility>
#include <variant>
#include <vector>

#include "serialize.h"

namespace concord::messages {

struct Test {
  static constexpr uint32_t id = 1; 

  uint16_t f1; 
  bool f2; 
  uint32_t f3; 
  int64_t f4; 
  std::vector<std::vector<int32_t>> f5; 
  std::string f6; 
};

void Serialize(std::vector<uint8_t>& output, const Test& t) {
  cmf::Serialize(output, t.f1);
  cmf::Serialize(output, t.f2);
  cmf::Serialize(output, t.f3);
  cmf::Serialize(output, t.f4);
  cmf::Serialize(output, t.f5);
  cmf::Serialize(output, t.f6);
}

void Deserialize(std::vector<uint8_t>::const_iterator& input, Test& t) {
  cmf::Deserialize(input, t.f1);
  cmf::Deserialize(input, t.f2);
  cmf::Deserialize(input, t.f3);
  cmf::Deserialize(input, t.f4);
  cmf::Deserialize(input, t.f5);
  cmf::Deserialize(input, t.f6);
}

struct TestOneof {
  static constexpr uint32_t id = 2; 

  int32_t someint; 
  std::variant<Test> blah; 
  Test a; 
};

void Serialize(std::vector<uint8_t>& output, const std::variant<Test>& val) {
  std::visit([&output](auto&& arg){
    cmf::Serialize(output, arg.id);
    Serialize(output, arg);
  }, val);
}
void Serialize(std::vector<uint8_t>& output, const TestOneof& t) {
  cmf::Serialize(output, t.someint);
  Serialize(output, t.blah);
  Serialize(output, t.a);
}

void Deserialize(std::vector<uint8_t>::const_iterator& start, std::variant<Test>& val) {
  uint32_t id;
  cmf::Deserialize(start, id);

  if (id == 1) {
    Test value;
    Deserialize(start, value);
    val = value;
    return;
  }

  throw cmf::DeserializeError(std::string("Invalid Message id in variant: ") + std::to_string(id));
}

void Deserialize(std::vector<uint8_t>::const_iterator& input, TestOneof& t) {
  cmf::Deserialize(input, t.someint);
  Deserialize(input, t.blah);
  Deserialize(input, t.a);
}

} // namespace concord::messages
