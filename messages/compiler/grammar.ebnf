@@grammar :: CMF
@@comments :: /#.*/

start = {msg:msg}+ $ ;

msg = 'Msg' name:msgname id:msgid '{' fields:{field}+ '}' ;

msgname = name:name;
msgid = id:number;
field = (type:(compound | primitive) name:name | type:tagged_oneof);

compound = kvpair:kvpair | list:list | map:map | optional:optional ;
kvpair = 'kvpair' key:primitive value:(primitive | compound) ;
list = 'list' type:(primitive | compound) ;
map = 'map' key:primitive value:(primitive | compound) ;
optional = 'optional' type:(primitive | compound) ;

# We need to declare a special rule here so that the generated AST tags a `oneof` as a type in a
# dictionary. This makes the printed AST make much more sense
tagged_oneof = oneof:oneof;

# A oneof is a special type of compound type in that its name comes immediately after the `oneof`
# keyword. A oneof can only be used direclty as a message field also, and not nested inside other
# types. This is for simplicity. If we really want variants inside our messages we should add a
# oneof field where each variant is its own message.
oneof = 'oneof' name:name '{' msg_names:{name}+ '}' ;

primitive
  =
  | bool
  | integer
  | string
  | bytes
  ;

integer
  =
  | 'uint8'
  | 'uint16'
  | 'uint32'
  | 'uint64'
  | 'sint8'
  | 'sint16'
  | 'sint32'
  | 'sint64'
  ;
bool = 'bool';
string = 'string';
bytes = 'bytes';


name = /[a-zA-Z_][a-zA-Z0-9_]*/ ;
number = /\d+/ ;

