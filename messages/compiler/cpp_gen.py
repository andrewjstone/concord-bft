from exceptions import CmfParseError
import semantics


class CppMsg:
    def __init__(self, struct, serialize, deserialize):
        """
        The CPP code representing the message as a struct, along with its serialize and
        deserialize methods
        """
        self.struct = struct
        self.serialize = serialize
        self.deserialize = deserialize


def is_int(type):
    return type in ['uint8', 'uint16', 'uint32', 'uint64', 'sint8', 'sint16', 'sint32', 'sint64']


def typestr(type):
    if not isinstance(type, dict):
        # A primitive type
        if is_int(type):
            return type + '_t'
        if type == 'string':
            return 'std::string'
        if type == 'bytes':
            return 'std::vector<uint8_t>'
        return type
    elif 'list' in type:
        return 'std::vector<' + typestr(type.list.type) + '>'
    elif 'kvpair' in type:
        return 'std::pair<' + typestr(type.kvpair.key) + ', ' + typestr(type.kvpair.value) + '>'
    elif 'map' in type:
        return 'std::map<' + typestr(type.map.key) + ', ' + typestr(type.map.value) + '>'
    elif 'optional' in type:
        return 'std::optional<' + typestr(type.optional.type) + '>'
    elif 'oneof' in type:
        return 'std::variant<' + ', '.join(type.oneof.msg_names) + '>'
    raise CmfParseError(type.parseinfo, "Invalid field type")


def structstr(msg):
    """ Take a msg AST node and create a string containing source of a C++ struct """
    struct = '''
struct {} {{
  static constexpr uint32_t id = {}; \n\n'''.format(msg.name, msg.id)
    for field in msg.fields:
        struct += "  " + typestr(field.type)
        struct += " {}; \n".format(field.name)

    struct += "};"
    return struct


def file_header():
    return '''
/***************************************
 Autogenerated by cmfc. Do not modify.
***************************************/

# include <cstdint>
# include <map>
# include <string>
# include <utility>
# include <variant>
# include <vector>

'''


def translate(ast, options=None):
    """ Walk concord message format (CMF) AST and generate C++ code """
    structs = []
    for msg in ast.msgs:
        struct = structstr(msg)
        structs.append(struct)
    return file_header() + '\n'.join(structs)
