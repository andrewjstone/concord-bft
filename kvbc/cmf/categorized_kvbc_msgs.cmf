# Updates

Msg MerkleUpdatesData 1 {
    map string string kv
    list string deletes
}

Msg ValueWithExpirationData 2 {
    string value
    optional int64 expire_at
    bool stale_on_update
}

Msg KeyValueUpdatesData 3 {
    map string ValueWithExpirationData kv
    list string deletes
    bool calculate_root_hash
}

Msg ImmutableValueUpdate 4 {
    string data
    list string tags
}

Msg ImmutableUpdatesData 5 {
    # key -> value, [tag1, tag2...]
    map string ImmutableValueUpdate kv
    bool calculate_root_hash
}

Msg CategoryUpdatesData 6 {
    map string oneof{
        MerkleUpdatesData
        KeyValueUpdatesData
        ImmutableUpdatesData
    } kv
}

# Updates info

Msg MerkleKeyFlag 1000 {
    bool deleted
}

Msg MerkleUpdatesInfo 1001 {
    map string MerkleKeyFlag keys
    fixedlist uint8 32 root_hash
    uint64 state_root_version
}

Msg KVKeyFlag 1002 {

    bool deleted
    bool stale_on_update
}

Msg KeyValueUpdatesInfo 1003 {
    map string KVKeyFlag keys
    optional fixedlist uint8 32 root_hash
}

Msg ImmutableUpdatesInfo 1004 {
    # key -> [tag1, tag2...]
    map string list string tagged_keys
    optional map string fixedlist uint8 32 tag_root_hashes
}

# Blocks

Msg BlockKey 2000 {
    uint64 block_id
}

Msg BlockData 2001 {
    uint64 block_id
    fixedlist uint8 32 parent_digest
    map string oneof{
        MerkleUpdatesInfo
        KeyValueUpdatesInfo
        ImmutableUpdatesInfo
    } categories_updates_info
}


Msg RawBlockData 2005 {
    fixedlist uint8 32 parent_digest
    CategoryUpdatesData updates
    map string optional fixedlist uint8 32 category_root_hash
}

# Misc

Msg BenchmarkMessage 3000 {
    string str
    fixedlist uint8 32 hash
    map string string map
}

# DB Key-Values

Msg KeyHash 4000 {
    fixedlist uint8 32 value
}

Msg VersionedKey 4001 {
    KeyHash key_hash
    uint64 version
}

Msg ImmutableDbValue 4002 {
    uint64 block_id
    string data
}

# Used to deserialize the version only from an ImmutableDbValue.
Msg ImmutableDbVersion 4003 {
    uint64 block_id
}

# Merkle Tree Data

Msg MerkleBlockValue 5000 {
    fixedlist uint8 32 root_hash
    list KeyHash hashed_added_keys
    list KeyHash hashed_deleted_keys
}

Msg KeyVersions 5001 {
    # The versions here are block ids, and not tree versions
    list uint64 data
}

Msg NibblePath 5002 {
    uint8 length
    list uint8 data
}

Msg BatchedInternalNodeKey 5003 {
    # The version of this key is the *tree* version, not block version
    uint64 version
    NibblePath path
}

Msg StaleBlockNodes 5004 {
    # The versions of these keys are *tree* versions,
    # which may be different from block versions due to pruning
    list BatchedInternalNodeKey internal_keys
    list VersionedKey leaf_keys
}

Msg LeafChild 5005 {
    fixedlist uint8 32 hash
    VersionedKey key
}

Msg InternalChild 5006 {
    fixedlist uint8 32 hash
    uint64 version
}

Msg BatchedInternalNodeChild 5007 {
    oneof {
        LeafChild
        InternalChild
    } child
}

Msg BatchedInternalNode 5008 {
    # Contains a 1 where a child node is present, 0 otherwise
    uint32 bitmask
    list BatchedInternalNodeChild children
}
