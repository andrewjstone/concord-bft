// Concord
//
// Copyright (c) 2020 VMware, Inc. All Rights Reserved.
//
// This product is licensed to you under the Apache 2.0 license (the "License").
// You may not use this product except in compliance with the Apache 2.0 License.
//
// This product may include a number of subcomponents with separate copyright
// notices and license terms. Your use of these subcomponents is subject to the
// terms and conditions of the sub-component's license, as noted in the
// LICENSE file.

/***************************************
 Autogenerated by cmfc. Do not modify.
***************************************/

#ifndef __CMF____/__/BFTENGINE/INCLUDE/MESSAGES/MESSAGES_HPP__
#define __CMF____/__/BFTENGINE/INCLUDE/MESSAGES/MESSAGES_HPP__

#include <cstdint>
#include <map>
#include <optional>
#include <string>
#include <utility>
#include <variant>
#include <vector>

namespace cmf {
class DeserializeError;
class NoDataLeftError;
class BadDataError;
}  // namespace cmf

namespace concord::messages {

struct ClientReq {
  static constexpr uint32_t id = 1;

  uint32_t client_id;
  uint8_t flags;
  uint64_t seq_num;
  uint64_t timeout_milli;
  std::vector<uint8_t> span;
  std::vector<uint8_t> correlation_id;
  std::vector<uint8_t> data;
};

void serialize(std::vector<uint8_t>& output, const ClientReq& t);
void deserialize(uint8_t*& input, const uint8_t* end, ClientReq& t);
void deserialize(const std::vector<uint8_t>& input, ClientReq& t);
bool operator==(const ClientReq& l, const ClientReq& r);


struct ClientRpy {
  static constexpr uint32_t id = 2;

  uint64_t seq_num;
  std::optional<uint32_t> primary;
  std::vector<uint8_t> span;
  std::vector<uint8_t> data;
  std::vector<uint8_t> replica_specific_info;
};

void serialize(std::vector<uint8_t>& output, const ClientRpy& t);
void deserialize(uint8_t*& input, const uint8_t* end, ClientRpy& t);
void deserialize(const std::vector<uint8_t>& input, ClientRpy& t);
bool operator==(const ClientRpy& l, const ClientRpy& r);


struct PrePrepare {
  static constexpr uint32_t id = 3;

  uint64_t view;
  uint64_t seq_num;
  uint16_t flags;
  std::vector<uint8_t> span;
  std::vector<std::vector<uint8_t>> requests;
  std::vector<uint8_t> digest_of_requests;
};

void serialize(std::vector<uint8_t>& output, const PrePrepare& t);
void deserialize(uint8_t*& input, const uint8_t* end, PrePrepare& t);
void deserialize(const std::vector<uint8_t>& input, PrePrepare& t);
bool operator==(const PrePrepare& l, const PrePrepare& r);


} // namespace concord::messages

#endif // __CMF____/__/BFTENGINE/INCLUDE/MESSAGES/MESSAGES_HPP__
